# $NetBSD: Makefile.common,v 1.37 2012/11/07 21:04:11 adam Exp $
#
# used by devel/boost-build/Makefile
# used by devel/boost-docs/Makefile
# used by devel/boost-jam/Makefile
# used by devel/boost-headers/Makefile
# used by devel/boost-libs/Makefile
# used by devel/boost-python/Makefile

BOOST_PACKAGE?=		undefined
BOOST_COMMENT?=		undefined
BOOST_VERSION=		1.52.0
BOOST_SHORT_VERSION=	${BOOST_VERSION:S/./_/:C/\..*$//}

DISTNAME=		boost_${BOOST_VERSION:S/./_/g}
CATEGORIES=		devel

.if ${BOOST_PACKAGE} == "meta-pkg"
PKGNAME=	boost-${BOOST_VERSION}
.else # ${BOOST_PACKAGE} != "meta-pkg"
PKGNAME=	boost-${BOOST_PACKAGE}-${BOOST_VERSION}

MASTER_SITES=	${MASTER_SITE_SOURCEFORGE:=boost/}
EXTRACT_SUFX=	.tar.bz2

MAINTAINER=	jmmv@NetBSD.org
HOMEPAGE=	http://www.boost.org/
COMMENT=	Free, peer-reviewed portable C++ source libraries ${BOOST_COMMENT}
LICENSE=	boost-license

CONFLICTS+=		boost<1.36.0

DISTINFO_FILE=		${.CURDIR}/../../meta-pkgs/boost/distinfo
PATCHDIR=		${.CURDIR}/../../meta-pkgs/boost/patches

USE_TOOLS+=		pax
USE_LANGUAGES=		c c++
USE_MULTIARCH=		lib
GCC_REQD+=		3.2 # if using gcc; ignored otherwise

PLIST_SUBST+=		BOOST_VERSION="${BOOST_VERSION}"

SUBST_CLASSES+=		prefix
SUBST_STAGE.prefix=	pre-configure
SUBST_MESSAGE.prefix=	Fixing prefix.
SUBST_FILES.prefix=	boostcpp.jam
SUBST_VARS.prefix=	PREFIX LIBARCHSUFFIX

SUBST_CLASSES+=		darwin
SUBST_STAGE.darwin=	pre-configure
SUBST_MESSAGE.darwin=	Fixing install_name for Darwin.
SUBST_FILES.darwin=	tools/build/v2/tools/*darwin.jam
SUBST_SED.darwin=	-e 's,-install_name ",-install_name "${PREFIX}/lib/,g'

.include "../../mk/bsd.prefs.mk"

# On SunOS, extract using pkgsrc nbtar to avoid warnings from native gtar.
.if ${OPSYS} == "SunOS"
TOOLS_PLATFORM.tar=	#empty
.endif

.if ${OPSYS} == "Darwin"
# Prevent using a pkgsrc libtool in OS X because the darwin toolset needs
# the native libtool from /Developer/usr/bin or /usr/bin.
post-wrapper:
.  if exists(/Developer/usr/bin/libtool)
	ln -s /Developer/usr/bin/libtool ${WRAPPER_BINDIR}/libtool
.  else
	ln -s /usr/bin/libtool ${WRAPPER_BINDIR}/libtool
.  endif
.endif

# We can't do this at post-extract because the extract cookie will get a future
# timestamp than the sources.  If this happens, print-PLIST does not work.
pre-configure:
	cd ${WRKSRC} && ${FIND} . -type f -print | ${XARGS} ${TOUCH}

# Generate a new user.hpp or use the installed one, depending on the package
# we are building.
.if ${BOOST_CONFIG} == "installed"
.  include "../../devel/boost-headers/buildlink3.mk"
do-configure:
	${CP} -f \
	    ${BUILDLINK_PREFIX.boost-headers}/include/boost/config/user.hpp \
	    ${WRKSRC}/boost/config/user.hpp
.elif ${BOOST_CONFIG} == "generate"
do-configure:
	cd ${WRKSRC}/libs/config && \
	    ${SETENV} ${CONFIGURE_ENV} ${SH} ./configure
	${CP} -f ${WRKSRC}/libs/config/user.hpp ${WRKSRC}/boost/config/user.hpp
.endif

boost-install-libs:
	${INSTALL_LIB_DIR} ${DESTDIR}${PREFIX}/lib
	cd ${WRKSRC}/stage/lib && pax -rw -p p libboost* ${DESTDIR}${PREFIX}/lib${LIBARCHSUFFIX}

.endif # ${BOOST_PACKAGE} == "meta-pkg"
